{"version":3,"sources":["components/name/name.js","components/card/ca-com.jsx","components/card-list/ca-li-com.jsx","components/search-box/serch-comp.jsx","App.js","serviceWorker.js","index.js"],"names":["name","id","email","Card","props","className","src","asur","alt","CardList","asurs","map","key","SearchBox","placeholder","handChang","type","onChange","App","e","setState","searchField","target","value","state","this","filterAsurs","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+SAoDeA,G,MApDF,CACX,CACEC,GAAI,EACJD,KAAM,gBACNE,MAAO,kBAET,CACED,GAAI,EACJD,KAAM,aACNE,MAAO,wBAET,CACED,GAAI,EACJD,KAAM,gBACNE,MAAO,sBAET,CACED,GAAI,EACJD,KAAM,WACNE,MAAO,kBAET,CACED,GAAI,EACJD,KAAM,YACNE,MAAO,2BAET,CACED,GAAI,EACJD,KAAM,aACNE,MAAO,uBAET,CACED,GAAI,EACJD,KAAM,YACNE,MAAO,0BAET,CACED,GAAI,EACJD,KAAM,cACNE,MAAO,oBAET,CACED,GAAI,EACJD,KAAM,YACNE,MAAO,kBAET,CACED,GAAI,GACJD,KAAM,cACNE,MAAO,qCC/CEC,G,MAAO,SAACC,GAAD,OAClB,yBAAKC,UAAU,kBACb,yBAAKC,IAAG,+BAA0BF,EAAMG,KAAKN,GAArC,0BAAiEO,IAAI,KAC7E,4BAAKJ,EAAMG,KAAKP,MAChB,2BAAII,EAAMG,KAAKL,UCFNO,G,MAAW,SAACL,GACvB,OACE,yBAAKC,UAAU,aACZD,EAAMM,MAAMC,KAAI,SAACJ,GAAD,OACf,kBAAC,EAAD,CAAMK,IAAKL,EAAKN,GAAIM,KAAMA,UCJrBM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,UAAf,OACrB,2BACMV,UAAU,SACVW,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC8BLG,E,kDA/Bb,aAAe,IAAD,8BACZ,gBAMFH,UAAY,SAAAI,GACR,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SANxC,EAAKC,MAAQ,CACXd,MAAOV,EACPqB,YAAa,IAJH,E,qDAUJ,IAAD,EACwBI,KAAKD,MAA5Bd,EADD,EACCA,MAAOW,EADR,EACQA,YACTK,EAAchB,EAAMiB,QAAO,SAACpB,GAAD,OAC/BA,EAAKP,KAAK4B,cAAcC,SAASR,EAAYO,kBAG/C,OACE,yBAAKvB,UAAU,OACf,6BACA,gCAAK,yBAAKA,UAAU,SAASC,IAAI,+CAA+CE,IAAI,KAApF,UAGE,kBAAC,EAAD,CACEM,YAAY,cACZC,UAAWU,KAAKV,YAElB,kBAAC,EAAD,CAAUL,MAAOgB,S,GA3BPI,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7a0ff7b8.chunk.js","sourcesContent":["const name = [\n  {\n    id: 1,\n    name: \"prashanatasur\",\n    email: \"hrami@delhi.in\"\n  },\n  {\n    id: 2,\n    name: \"ashishasur\",\n    email: \"bhairo baba@delhi.in\"\n  },\n  {\n    id: 3,\n    name: \"shubhanshasur\",\n    email: \"baklol@jabalpur.in\"\n  },\n  {\n    id: 4,\n    name: \"shanasur\",\n    email: \"bhola@delhi.in\"\n  },\n  {\n    id: 5,\n    name: \"anishasur\",\n    email: \"NO_comments@haridwar.in\"\n  },\n  {\n    id: 6,\n    name: \"sahilaasur\",\n    email: \"late_latif@delhi.in\"\n  },\n  {\n    id: 7,\n    name: \"vanshasur\",\n    email: \"gaon_wale@faridabad.in\"\n  },\n  {\n    id: 8,\n    name: \"Depanshasur\",\n    email: \"arnold@almoda.in\"\n  },\n  {\n    id: 9,\n    name: \"karanasur\",\n    email: \"Btech@delhi.in\"\n  },\n  {\n    id: 10,\n    name: \"bhavlenasur\",\n    email: \"attainu&shrinath_lover@delhi.in\"\n  },\n];\nexport default name;\n","import React from \"react\";\nimport \"./ca-style.css\";\nexport const Card = (props) => (\n  <div className=\"card-container\">\n    <img src={`https://robohash.org/${props.asur.id}?set=set2&size=250x220`} alt=\"\"/>\n    <h2>{props.asur.name}</h2>\n    <p>{props.asur.email}</p>\n  </div>\n);","import React from \"react\";\nimport { Card } from \"../card/ca-com\"\nimport \"./ca-li-style.css\";\n\nexport const CardList = (props) => {\n  return (\n    <div className=\"card-list\">\n      {props.asurs.map((asur) => (\n        <Card key={asur.id} asur={asur}/>\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport './se-co-style.css'\n\nexport const SearchBox = ({placeholder, handChang}) => (\n    <input\n          className='search'\n          type=\"search\"\n          placeholder={placeholder}\n          onChange={handChang}\n        />\n    \n)","import React from \"react\";\nimport \"./App.css\";\n\nimport name from \"./components/name/name\";\nimport { CardList } from \"./components/card-list/ca-li-com\";\nimport { SearchBox } from \"./components/search-box/serch-comp\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      asurs: name,\n      searchField: \"\",\n    };\n  }\n  handChang = e => {\n      this.setState({ searchField: e.target.value });\n  }\n  render() {\n    const { asurs, searchField } = this.state;\n    const filterAsurs = asurs.filter((asur) =>\n      asur.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n      <div>\n      <h1> <img className=\"appImg\" src=\"https://robohash.org/1?set=set2&size=250x220\" alt=\"\" /> Asur</h1>\n      </div>\n      \n        <SearchBox\n          placeholder=\"Search Asur\"\n          handChang={this.handChang }\n        />\n        <CardList asurs={filterAsurs} />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}